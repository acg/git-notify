#!/usr/bin/env perl
#
# Tool to send git commit notifications
#
# Copyright 2005 Alexandre Julliard
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This script is meant to be called from .git/hooks/post-receive.
#
# Usage: git-notify [options] [--] old-sha1 new-sha1 refname

use strict;
use warnings;
use open ':encoding(utf8)';
use open ':std';
use Encode 'encode';
use Cwd 'realpath';

exit main( @ARGV );

sub usage()
{
    print "Usage: $0 [options] [--] old-sha1 new-sha1 refname\n";
    print "   -t addr   Send mail notifications to specified address\n";
    print "   -f from   Send mail notifications from the specified address\n";
    print "   -m mailer Specify alternate sendmail-compatible program\n";
    print "   -n max    Set max number of individual mails to send\n";
    print "   -r name   Set the git repository name\n";
    print "   -s bytes  Set the maximum diff size in bytes (-1 for no limit)\n";
    print "   -u url    Set the URL to the gitweb browser\n";
    print "   -i branch If at least one -i is given, report only for specified branches\n";
    print "   -x branch Exclude changes to the specified branch from reports\n";
    print "   -X        Exclude merge commits\n";
    exit 1;
}

# some parameters you may want to change

# mailer program
my $mailer = "sendmail";

# debug mode
my $debug = 0;

# configuration parameters

# base URL of the gitweb repository browser (can be set with the -u option)
my $gitweb_url = git_config( "notify.baseurl" );

# default repository name (can be changed with the -r option)
my $repos_name = git_config( "notify.repository" ) || get_repos_name();

# max size of diffs in bytes (can be changed with the -s option), 0 to disable
my $max_diff_size = git_config( "notify.maxdiff" ) || 10000;

# max size of stat in bytes (can be changed with the -S option), 0 to disable
my $max_stat_size = git_config( "notify.maxstat" ) || 10000;

# address mail will be sent to (can be set with -t option)
my $to_address = git_config( "notify.to" );

# address mail will appear to come from (can be set with -f option)
my $from_address = git_config( "notify.from" );

# max number of individual notices before falling back to a single global notice (can be set with -n option)
my $max_individual_notices = git_config( "notify.maxnotices" ) || 100;

# branches to include
my @include_list = split /\s+/, git_config( "notify.include" ) || "";

# branches to exclude
my @exclude_list = split /\s+/, git_config( "notify.exclude" ) || "";

# Extra options to git rev-list
my @revlist_options;

sub xml_escape
{
    my $str = shift;
    $str =~ s/&/&amp;/g;
    $str =~ s/</&lt;/g;
    $str =~ s/>/&gt;/g;
    my @chars = unpack "U*", $str;
    $str = join "", map { ($_ > 127) ? sprintf "&#%u;", $_ : chr($_); } @chars;
    return $str;
}

# format an integer date + timezone as string
# algorithm taken from git's date.c
sub format_date
{
    my ($time,$tz) = @_;

    if ($tz < 0)
    {
        my $minutes = (-$tz / 100) * 60 + (-$tz % 100);
        $time -= $minutes * 60;
    }
    else
    {
        my $minutes = ($tz / 100) * 60 + ($tz % 100);
        $time += $minutes * 60;
    }
    return gmtime($time) . sprintf " %+05d", $tz;
}

# fetch a parameter from the git config file
sub git_config
{
    my ($param) = @_;

    open CONFIG, "-|" or exec "git", "config", $param;
    my $ret = <CONFIG>;
    chomp $ret if $ret;
    close CONFIG or $ret = undef;
    return $ret;
}

# parse command line options
sub parse_options
{
    while (@_ && $_[0] =~ /^-/)
    {
        my $arg = shift;

        if ($arg eq '--') { last; }
        elsif ($arg eq '-t') { $to_address = shift; }
        elsif ($arg eq '-f') { $from_address = shift; }
        elsif ($arg eq '-m') { $mailer = shift; }
        elsif ($arg eq '-n') { $max_individual_notices = shift; }
        elsif ($arg eq '-r') { $repos_name = shift; }
        elsif ($arg eq '-s') { $max_diff_size = shift; }
        elsif ($arg eq '-S') { $max_stat_size = shift; }
        elsif ($arg eq '-u') { $gitweb_url = shift; }
        elsif ($arg eq '-i') { push @include_list, shift; }
        elsif ($arg eq '-x') { push @exclude_list, shift; }
        elsif ($arg eq '-X') { push @revlist_options, "--no-merges"; }
        elsif ($arg eq '-d') { $debug++; }
        else { usage(); }
    }
    if (@_ && $#_ != 2) { usage(); }
    @exclude_list = map { "^$_"; } @exclude_list;
    return @_;
}

# send an email notification
sub mail_notification
{
    my ($name, $subject, $content_type, @text) = @_;
    $subject = encode("MIME-Q",$subject);
    if ($debug)
    {
        print "---------------------\n";
        print "To: $name\n";
        print "Subject: $subject\n";
        print "Content-Type: $content_type\n";
        print "\n", join("\n", @text), "\n";
    }
    else
    {
        my $pid = open MAIL, "|-";
        return unless defined $pid;
        if (!$pid)
        {
            my @args = ( $mailer );
            push @args, "-f${from_address}" if $from_address;
            push @args, $name;
            exec @args or die "Cannot exec @args: $!";
        }
        print MAIL "Subject: $subject";
        print MAIL join("\n", @text), "\n";
        close MAIL;
    }
}

# get the default repository name
sub get_repos_name
{
    my $dir = `git rev-parse --git-dir`;
    chomp $dir;
    my $repos = realpath($dir);
    $repos =~ s/(.*?)((\.git\/)?\.git)$/$1/;
    $repos =~ s/(.*)\/([^\/]+)\/?$/$2/;
    return $repos;
}

# extract the information from a commit or tag object and return a hash containing the various fields
sub get_object_info
{
    my $obj = shift;
    my %info = ();
    my @log = ();
    my $do_log = 0;

    open TYPE, "-|" or exec "git", "cat-file", "-t", $obj or die "cannot run git-cat-file";
    my $type = <TYPE>;
    chomp $type;
    close TYPE;

    open OBJ, "-|" or exec "git", "cat-file", $type, $obj or die "cannot run git-cat-file";
    while (<OBJ>)
    {
        chomp;
        if ($do_log)
        {
            last if /^-----BEGIN PGP SIGNATURE-----/;
            push @log, $_;
        }
        elsif (/^(author|committer|tagger) ((.*)(<.*>)) (\d+) ([+-]\d+)$/)
        {
            $info{$1} = $2;
            $info{$1 . "_name"} = $3;
            $info{$1 . "_email"} = $4;
            $info{$1 . "_date"} = $5;
            $info{$1 . "_tz"} = $6;
        }
        elsif (/^tag (.*)$/)
        {
            $info{"tag"} = $1;
        }
        elsif (/^$/) { $do_log = 1; }
    }
    close OBJ;

    $info{"type"} = $type;
    $info{"log"} = \@log;
    return %info;
}

# send a commit notice to a mailing list
sub send_commit_notice
{
    my ($ref,$obj) = @_;
    my %info = get_object_info($obj);
    my @notice = ();
    my $subject;

    if ($info{"type"} eq "tag")
    {
        push @notice,
        "Module: $repos_name",
        "Branch: $ref",
        "Tag:    $obj",
        $gitweb_url ? "URL:    $gitweb_url/?a=tag;h=$obj\n" : "",
        "Tagger: " . $info{"tagger"},
        "Date:   " . format_date($info{"tagger_date"},$info{"tagger_tz"}),
        "",
        join "\n", @{$info{"log"}};
        $subject = "Tag " . $info{"tag"} . " : " . $info{"tagger_name"} . ": " . ${$info{"log"}}[0];
    }
    else
    {
        push @notice,
        "Module: $repos_name",
        "Branch: $ref",
        "Commit: $obj",
        $gitweb_url ? "URL:    $gitweb_url/?a=commit;h=$obj\n" : "",
        "Author: " . $info{"author"},
        "Date:   " . format_date($info{"author_date"},$info{"author_tz"}),
        "",
        join "\n", @{$info{"log"}},
        "",
        "---",
        "";

        my $stat = '';

        if ($max_stat_size)
        {
            open STAT, "-|" or exec "git", "diff-tree", "--stat", "-M", "--no-commit-id", $obj or die "cannot exec git-diff-tree";
            $stat = join("", <STAT>);
            close STAT;
        }

        if (($max_stat_size == -1) || (length($stat) < $max_stat_size))
        {
            push @notice, $stat;
        }

        my $diff = '';

        if ($max_diff_size)
        {
            open DIFF, "-|" or exec "git", "diff-tree", "-p", "-M", "--no-commit-id", $obj or die "cannot exec git-diff-tree";
            $diff = join( "", <DIFF> );
            close DIFF;
        }

        if (($max_diff_size == -1) || (length($diff) < $max_diff_size))
        {
            push @notice, $diff;
        }
        elsif ($max_diff_size)
        {
            push @notice, "Diff:   $gitweb_url/?a=commitdiff;h=$obj" if $gitweb_url;
        }

        $subject = $info{"author_name"} . ": " . ${$info{"log"}}[0];
    }

    mail_notification($to_address, $subject, "text/plain; charset=UTF-8", @notice);
}

# send a global commit notice when there are too many commits for individual mails
sub send_global_notice
{
    my ($ref, $old_sha1, $new_sha1, $newref) = @_;
    my @notice = ();

    push @revlist_options, "--pretty";
    open LIST, "-|" or exec "git", "rev-list", @revlist_options, "^$old_sha1", "$new_sha1", @exclude_list or die "cannot exec git-rev-list";
    while (<LIST>)
    {
        chomp;
        s/^commit /URL:    $gitweb_url\/?a=commit;h=/ if $gitweb_url;
        push @notice, $_;
    }
    close LIST;

    my $subject = sprintf "New commits on %s branch %s%s", $repos_name, $ref, ($newref?' (new branch)':'');
    mail_notification($to_address, $subject, "text/plain; charset=UTF-8", @notice);
}

# send all the notices
sub send_all_notices
{
    my ($old_sha1, $new_sha1, $ref) = @_;
    my $newref = 0;

    $ref =~ s/^refs\/heads\///;

    return if (@include_list && !grep {$_ eq $ref} @include_list);

    if ($old_sha1 eq '0' x 40)  # new ref, find closest "branch point" ancestor
    {
        $newref = 1;
        $old_sha1 = undef;
        open LIST, "-|" or exec "git", "log", '--pretty=format:%H %d', $ref or die "cannot exec git-log";
        while (<LIST>)
        {
            chomp;
            next if $. == 1;
            my ($hash,$refnames) = split /\s+/, $_, 2;
            $old_sha1 = $hash and last if $refnames;
        }
        close LIST;
    }

    my @commits = ();

    open LIST, "-|" or exec "git", "rev-list", @revlist_options, "^$old_sha1", "$new_sha1", @exclude_list or die "cannot exec git-rev-list";
    while (<LIST>)
    {
        chomp;
        die "invalid commit $_" unless /^[0-9a-f]{40}$/;
        unshift @commits, $_;
    }
    close LIST;

    if (@commits > $max_individual_notices)
    {
        send_global_notice( $ref, $old_sha1, $new_sha1, $newref ) if $to_address;
        return;
    }

    foreach my $commit (@commits)
    {
        send_commit_notice( $ref, $commit ) if $to_address;
    }
}

sub main
{
    my @args = @_;

    @args = parse_options( @args );

    # append repository path to URL
    $gitweb_url .= "/$repos_name.git" if $gitweb_url;

    if (@args)
    {
        send_all_notices( $args[0], $args[1], $args[2] );
    }
    else  # read them from stdin
    {
        while (<>)
        {
            chomp;
            if (/^([0-9a-f]{40}) ([0-9a-f]{40}) (.*)$/) { send_all_notices( $1, $2, $3 ); }
        }
    }

    return 0;
}

